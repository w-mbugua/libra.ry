# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Author {
  books: [Book!]!
  id: Float!
  name: String!
}

type Book {
  author: Author!
  cover: String!
  createdAt: DateTime!
  description: String!
  id: Float!
  loans: [Loan!]!
  owner: Member!
  reservations: [Reservation!]!
  status: String
  subtitle: String
  tags: [Tag!]!
  textSnippet: String!
  thumbnail: String
  title: String!
  updatedAt: DateTime!
}

type BookResponse {
  book: Book
  message: String
}

input BookUpdateInput {
  author: String!
  description: String!
  id: Int!
  subtitle: String!
  title: String!
}

type Conversation {
  createdAt: DateTime!
  id: Float!
  latestMessage: String
  messages: [Message!]!
  participants: [ConversationParticipant!]!
  updatedAt: DateTime!
}

type ConversationParticipant {
  conversation: Conversation!
  createdAt: DateTime!
  hasSeenLatestMessage: Boolean!
  id: Float!
  updatedAt: DateTime!
  userId: Float!
}

type ConversationResponse {
  conversation: Conversation
  error: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type FieldError {
  field: String!
  message: String!
}

type Loan {
  book: Book!
  borrower: Member!
  createdAt: DateTime!
  id: Float!
  lender: Member!
  loanOverdue: Boolean!
  returnDate: DateTime!
  status: String
  updatedAt: DateTime!
}

input LoginInput {
  email: String
  password: String!
  phoneNumber: String
}

type Member {
  books: [Book!]!
  email: String!
  id: Float!
  phoneNumber: String!
  username: String!
}

type MemberResponse {
  error: [FieldError!]
  member: Member
}

type Message {
  body: String!
  conversation: Conversation!
  createdAt: DateTime!
  id: Float!
  sender: Member!
  updatedAt: DateTime!
}

type Mutation {
  addAuthor(name: String!): Author!
  addBook(newBookData: NewBookInput!): Book!
  borrow(id: Float!): BookResponse!
  changePassword(newPassword: String!, token: String!): Member!
  createConversation(createConversationData: conversationsInput!): ConversationResponse!
  deleteBook(id: Float!): Int!
  forgotPassword(email: String!): Boolean!
  login(loginInput: LoginInput!): MemberResponse!
  logout: Boolean!
  register(newMemberData: NewMemberInput!): MemberResponse!
  reserve(id: Float!): BookResponse!
  updateBook(cover: Upload, options: BookUpdateInput!): Book!
}

input NewBookInput {
  author: String!
  tag: String!
  title: String!
}

input NewMemberInput {
  email: String!
  password: String!
  phoneNumber: String!
  username: String!
}

type Query {
  conversations: [Conversation!]!
  currentUser: Member!
  getAuthors: [Author!]!
  getBookById(id: Float!): Book!
  getBooks: [Book!]!
  getTags: [Author!]!
  loans: [Loan!]!
  loansByLenderId(lenderId: Float!): [Loan!]!
  reservations: [Reservation!]!
  reservationsByLenderId(lenderId: Float!): [Reservation!]!
  searchBook(searchTerm: String!): [Book!]!
}

type Reservation {
  book: Book!
  createdAt: DateTime!
  id: Float!
  lender: Member!
  reserver: Member!
  status: String!
  toBorrowDate: Int!
  updatedAt: DateTime!
}

type Tag {
  books: [Book!]!
  id: Float!
  name: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input conversationsInput {
  participantIds: [Int!]!
}